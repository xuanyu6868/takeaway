{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from \"@/router\";\n\n// 创建一个新的axios对象\nconst request = axios.create({\n  baseURL: process.env.VUE_APP_BASEURL,\n  // 后端的接口地址  ip:port\n  timeout: 30000 // 30s请求超时\n});\n\n// request 拦截器\n// 可以在请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // 设置请求头格式\n  let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}'); // 获取缓存的用户信息\n  if (user && user.token) {\n    config.headers['token'] = user.token; // 设置请求头\n  }\n\n  return config;\n}, error => {\n  console.error('request error: ' + error); // for debug\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  if (res.code === '401') {\n    router.push('/login');\n  }\n  return res;\n}, error => {\n  console.error('response error: ' + error); // for debug\n  if (error.response && error.response.status) {\n    switch (error.response.status) {\n      case 401:\n        // 未登录或者登录过期处理\n        router.push('/login');\n        break;\n      case 403:\n        // 权限不足处理\n        console.error('403: 权限不足');\n        break;\n      case 404:\n        // 未找到接口处理\n        console.error('404: 接口未找到');\n        break;\n      case 500:\n        // 服务端错误处理\n        console.error('500: 服务器错误');\n        break;\n      default:\n        console.error('其他错误: ' + error.response.status);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","process","env","VUE_APP_BASEURL","timeout","interceptors","use","config","headers","user","JSON","parse","localStorage","getItem","token","error","console","Promise","reject","response","res","data","code","push","status"],"sources":["D:/takeaway/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from \"@/router\";\n\n// 创建一个新的axios对象\nconst request = axios.create({\n    baseURL: process.env.VUE_APP_BASEURL,   // 后端的接口地址  ip:port\n    timeout: 30000                          // 30s请求超时\n})\n\n// request 拦截器\n// 可以在请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';        // 设置请求头格式\n    let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}')  // 获取缓存的用户信息\n    if (user && user.token) {\n        config.headers['token'] = user.token  // 设置请求头\n    }\n\n    return config\n}, error => {\n    console.error('request error: ' + error) // for debug\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        if (res.code === '401') {\n            router.push('/login')\n        }\n        return res;\n    },\n    error => {\n        console.error('response error: ' + error) // for debug\n        if (error.response && error.response.status) {\n            switch (error.response.status) {\n                case 401:\n                    // 未登录或者登录过期处理\n                    router.push('/login');\n                    break;\n                case 403:\n                    // 权限不足处理\n                    console.error('403: 权限不足');\n                    break;\n                case 404:\n                    // 未找到接口处理\n                    console.error('404: 接口未找到');\n                    break;\n                case 500:\n                    // 服务端错误处理\n                    console.error('500: 服务器错误');\n                    break;\n                default:\n                    console.error('其他错误: ' + error.response.status);\n            }\n        }\n        return Promise.reject(error)\n    }\n)\n\nexport default request\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,eAAe;EAAI;EACxCC,OAAO,EAAE,KAAK,CAA0B;AAC5C,CAAC,CAAC;;AAEF;AACA;AACA;AACAN,OAAO,CAACO,YAAY,CAACP,OAAO,CAACQ,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC,CAAC,CAAQ;EAC1E,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,EAAE;EAChE,IAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAK,EAAE;IACpBP,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACK,KAAK,EAAE;EAC1C;;EAEA,OAAOP,MAAM;AACjB,CAAC,EAAEQ,KAAK,IAAI;EACRC,OAAO,CAACD,KAAK,CAAC,iBAAiB,GAAGA,KAAK,CAAC,EAAC;EACzC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAjB,OAAO,CAACO,YAAY,CAACc,QAAQ,CAACb,GAAG,CAC7Ba,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGV,IAAI,CAACC,KAAK,CAACS,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,IAAIA,GAAG,CAACE,IAAI,KAAK,KAAK,EAAE;IACpBzB,MAAM,CAAC0B,IAAI,CAAC,QAAQ,CAAC;EACzB;EACA,OAAOH,GAAG;AACd,CAAC,EACDL,KAAK,IAAI;EACLC,OAAO,CAACD,KAAK,CAAC,kBAAkB,GAAGA,KAAK,CAAC,EAAC;EAC1C,IAAIA,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,CAACK,MAAM,EAAE;IACzC,QAAQT,KAAK,CAACI,QAAQ,CAACK,MAAM;MACzB,KAAK,GAAG;QACJ;QACA3B,MAAM,CAAC0B,IAAI,CAAC,QAAQ,CAAC;QACrB;MACJ,KAAK,GAAG;QACJ;QACAP,OAAO,CAACD,KAAK,CAAC,WAAW,CAAC;QAC1B;MACJ,KAAK,GAAG;QACJ;QACAC,OAAO,CAACD,KAAK,CAAC,YAAY,CAAC;QAC3B;MACJ,KAAK,GAAG;QACJ;QACAC,OAAO,CAACD,KAAK,CAAC,YAAY,CAAC;QAC3B;MACJ;QACIC,OAAO,CAACD,KAAK,CAAC,QAAQ,GAAGA,KAAK,CAACI,QAAQ,CAACK,MAAM,CAAC;IACvD;EACJ;EACA,OAAOP,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAejB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}