{"ast":null,"code":"export default {\n  name: \"Notice\",\n  data() {\n    return {\n      tableData: [],\n      // 表格数据\n      pageNum: 1,\n      // 当前页码\n      pageSize: 10,\n      // 每页显示条数\n      total: 0,\n      // 数据总数\n      title: null,\n      // 标题\n      fromVisible: false,\n      // 表单弹窗是否可见\n      form: {},\n      // 表单数据\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      // 当前用户信息\n      rules: {\n        // 表单验证规则\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入内容',\n          trigger: 'blur'\n        }]\n      },\n      ids: [] // 选中的行数据ID数组\n    };\n  },\n\n  created() {\n    this.load(1); // 初始化加载数据\n  },\n\n  methods: {\n    handleAdd() {\n      // 新增数据\n      this.form = {}; // 清空表单数据\n      this.fromVisible = true; // 打开表单弹窗\n    },\n\n    handleEdit(row) {\n      // 编辑数据\n      this.form = JSON.parse(JSON.stringify(row)); // 深拷贝选中的行数据到表单\n      this.fromVisible = true; // 打开表单弹窗\n    },\n\n    save() {\n      // 保存数据\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/notice/update' : '/notice/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 保存成功\n              this.$message.success('保存成功');\n              this.load(1); // 重新加载数据\n              this.fromVisible = false; // 关闭表单弹窗\n            } else {\n              this.$message.error(res.msg); // 显示错误信息\n            }\n          });\n        }\n      });\n    },\n\n    del(id) {\n      // 删除数据\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/notice/delete/' + id).then(res => {\n          if (res.code === '200') {\n            // 删除成功\n            this.$message.success('操作成功');\n            this.load(1); // 重新加载数据\n          } else {\n            this.$message.error(res.msg); // 显示错误信息\n          }\n        });\n      }).catch(() => {});\n    },\n    handleSelectionChange(rows) {\n      // 更新选中的行数据\n      this.ids = rows.map(v => v.id); // 提取选中的行数据ID\n    },\n\n    delBatch() {\n      // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: \"warning\"\n      }).then(response => {\n        this.$request.delete('/notice/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            // 删除成功\n            this.$message.success('操作成功');\n            this.load(1); // 重新加载数据\n          } else {\n            this.$message.error(res.msg); // 显示错误信息\n          }\n        });\n      }).catch(() => {});\n    },\n    load(pageNum) {\n      // 分页加载数据\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/notice/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          title: this.title\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    reset() {\n      // 重置搜索条件\n      this.title = null;\n      this.load(1);\n    },\n    handleCurrentChange(pageNum) {\n      // 页码改变时重新加载数据\n      this.load(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","title","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","content","ids","created","load","methods","handleAdd","handleEdit","row","stringify","save","$refs","formRef","validate","valid","$request","url","id","method","then","res","code","$message","success","error","msg","del","$confirm","type","response","delete","catch","handleSelectionChange","rows","map","v","delBatch","length","warning","get","params","list","reset","handleCurrentChange"],"sources":["src/views/manager/Notice.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- 搜索容器 -->\n    <div class=\"search-container\">\n      <!-- 标题输入框 -->\n      <el-input placeholder=\"请输入标题查询\" style=\"width: 200px\" v-model=\"title\"></el-input>\n      <!-- 查询按钮 -->\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load(1)\">查询</el-button>\n      <!-- 重置按钮 -->\n      <el-button type=\"warning\" plain style=\"margin-left: 1px\" @click=\"reset\">重置</el-button>\n      <!-- 新增按钮 -->\n      <el-button type=\"primary\" plain style=\"margin-left: 1px\" @click=\"handleAdd\">新增</el-button>\n      <!-- 批量删除按钮 -->\n      <el-button type=\"danger\" plain style=\"margin-left: 10px\" @click=\"delBatch\">批量删除</el-button>\n    </div>\n\n    <!-- 表格容器 -->\n    <div class=\"table\">\n      <!-- 数据表格 -->\n      <el-table :data=\"tableData\" stripe @selection-change=\"handleSelectionChange\">\n        <!-- 选择列 -->\n        <el-table-column type=\"selection\" width=\"55\" align=\"center\"></el-table-column>\n        <!-- 序号列 -->\n        <el-table-column prop=\"id\" label=\"序号\" width=\"80\" align=\"center\" sortable></el-table-column>\n        <!-- 标题列 -->\n        <el-table-column prop=\"title\" label=\"标题\" show-overflow-tooltip></el-table-column>\n        <!-- 内容列 -->\n        <el-table-column prop=\"content\" label=\"内容\" show-overflow-tooltip></el-table-column>\n        <!-- 创建时间列 -->\n        <el-table-column prop=\"time\" label=\"创建时间\"></el-table-column>\n        <!-- 创建人列 -->\n        <el-table-column prop=\"user\" label=\"创建人\"></el-table-column>\n        <!-- 操作列 -->\n        <el-table-column label=\"操作\" width=\"180\" align=\"center\">\n          <template v-slot=\"scope\">\n            <!-- 编辑按钮 -->\n            <el-button plain type=\"primary\" @click=\"handleEdit(scope.row)\" size=\"mini\">编辑</el-button>\n            <!-- 删除按钮 -->\n            <el-button plain type=\"danger\" size=\"mini\" @click=\"del(scope.row.id)\">删除</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页 -->\n      <div class=\"pagination\">\n        <el-pagination\n            background\n            @current-change=\"handleCurrentChange\"\n            :current-page=\"pageNum\"\n            :page-sizes=\"[5, 10, 20]\"\n            :page-size=\"pageSize\"\n            layout=\"total, prev, pager, next\"\n            :total=\"total\">\n        </el-pagination>\n      </div>\n    </div>\n\n    <!-- 弹窗 -->\n    <el-dialog title=\"信息\" :visible.sync=\"fromVisible\" width=\"40%\" :close-on-click-modal=\"false\" destroy-on-close>\n      <!-- 表单 -->\n      <el-form label-width=\"100px\" style=\"padding-right: 50px\" :model=\"form\" :rules=\"rules\" ref=\"formRef\">\n        <!-- 标题输入 -->\n        <el-form-item prop=\"title\" label=\"标题\">\n          <el-input v-model=\"form.title\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n        <!-- 内容输入 -->\n        <el-item prop=\"content\" label=\"内容\">\n          <el-input type=\"textarea\" :rows=\"5\" v-model=\"form.content\" autocomplete=\"off\"></el-input>\n          </el-item>\n      </el-form>\n      <!-- 弹窗底部 -->\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"fromVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"save\">确定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Notice\",\n  data() {\n    return {\n      tableData: [],  // 表格数据\n      pageNum: 1,   // 当前页码\n      pageSize: 10,  // 每页显示条数\n      total: 0,  // 数据总数\n      title: null,  // 标题\n      fromVisible: false,  // 表单弹窗是否可见\n      form: {},  // 表单数据\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),  // 当前用户信息\n      rules: {  // 表单验证规则\n        title: [\n          {required: true, message: '请输入标题', trigger: 'blur'},\n        ],\n        content: [\n          {required: true, message: '请输入内容', trigger: 'blur'},\n        ]\n      },\n      ids: []  // 选中的行数据ID数组\n    }\n  },\n  created() {\n    this.load(1)  // 初始化加载数据\n  },\n  methods: {\n    handleAdd() {   // 新增数据\n      this.form = {}  // 清空表单数据\n      this.fromVisible = true   // 打开表单弹窗\n    },\n    handleEdit(row) {   // 编辑数据\n      this.form = JSON.parse(JSON.stringify(row))  // 深拷贝选中的行数据到表单\n      this.fromVisible = true   // 打开表单弹窗\n    },\n    save() {   // 保存数据\n      this.$refs.formRef.validate((valid) => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/notice/update' : '/notice/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {  // 保存成功\n              this.$message.success('保存成功')\n              this.load(1)  // 重新加载数据\n              this.fromVisible = false  // 关闭表单弹窗\n            } else {\n              this.$message.error(res.msg)  // 显示错误信息\n            }\n          })\n        }\n      })\n    },\n    del(id) {   // 删除数据\n      this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(response => {\n        this.$request.delete('/notice/delete/' + id).then(res => {\n          if (res.code === '200') {   // 删除成功\n            this.$message.success('操作成功')\n            this.load(1)  // 重新加载数据\n          } else {\n            this.$message.error(res.msg)  // 显示错误信息\n          }\n        })\n      }).catch(() => {\n      })\n    },\n    handleSelectionChange(rows) {   // 更新选中的行数据\n      this.ids = rows.map(v => v.id)   // 提取选中的行数据ID\n    },\n    delBatch() {   // 批量删除\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据')\n        return\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {type: \"warning\"}).then(response => {\n        this.$request.delete('/notice/delete/batch', {data: this.ids}).then(res => {\n          if (res.code === '200') {   // 删除成功\n            this.$message.success('操作成功')\n            this.load(1)  // 重新加载数据\n          } else {\n            this.$message.error(res.msg)  // 显示错误信息\n          }\n        })\n      }).catch(() => {\n      })\n    },\n    load(pageNum) {  // 分页加载数据\n      if (pageNum) this.pageNum = pageNum\n      this.$request.get('/notice/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          title: this.title,\n        }\n      }).then(res => {\n        this.tableData = res.data?.list\n        this.total = res.data?.total\n      })\n    },\n    reset() {  // 重置搜索条件\n      this.title = null\n      this.load(1)\n    },\n    handleCurrentChange(pageNum) {  // 页码改变时重新加载数据\n      this.load(pageNum)\n    },\n  }\n}\n</script>\n\n<style scoped>\n/* 容器样式 */\n.container {\n  background-image: url('@/assets/imgs/bg2.png'); /* 背景图片 */\n  background-size: cover; /* 背景图片覆盖 */\n  padding: 200px; /* 内边距 */\n}\n\n/* 搜索容器样式 */\n.search-container {\n  display: flex; /* 使用Flex布局 */\n  justify-content: center; /* 水平居中 */\n  align-items: center; /* 垂直居中 */\n  margin-bottom: 20px; /* 下外边距 */\n}\n\n/* 表格容器样式 */\n.table {\n  margin-bottom: 20px; /* 下外边距 */\n}\n\n/* 分页样式 */\n.pagination {\n  text-align: center; /* 文本居中 */\n  margin-top: 20px; /* 上外边距 */\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}